// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotword.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hotword_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hotword_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "audio.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hotword_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hotword_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hotword_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_hotword_2eproto_metadata_getter(int index);
namespace rero {
class HotwordEmbedding;
struct HotwordEmbeddingDefaultTypeInternal;
extern HotwordEmbeddingDefaultTypeInternal _HotwordEmbedding_default_instance_;
class HotwordFileName;
struct HotwordFileNameDefaultTypeInternal;
extern HotwordFileNameDefaultTypeInternal _HotwordFileName_default_instance_;
class HotwordResult;
struct HotwordResultDefaultTypeInternal;
extern HotwordResultDefaultTypeInternal _HotwordResult_default_instance_;
class RawEmbedding;
struct RawEmbeddingDefaultTypeInternal;
extern RawEmbeddingDefaultTypeInternal _RawEmbedding_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template<> ::rero::HotwordEmbedding* Arena::CreateMaybeMessage<::rero::HotwordEmbedding>(Arena*);
template<> ::rero::HotwordFileName* Arena::CreateMaybeMessage<::rero::HotwordFileName>(Arena*);
template<> ::rero::HotwordResult* Arena::CreateMaybeMessage<::rero::HotwordResult>(Arena*);
template<> ::rero::RawEmbedding* Arena::CreateMaybeMessage<::rero::RawEmbedding>(Arena*);
template<> ::rero::Result* Arena::CreateMaybeMessage<::rero::Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rero {

// ===================================================================

class HotwordResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.HotwordResult) */ {
 public:
  inline HotwordResult() : HotwordResult(nullptr) {}
  virtual ~HotwordResult();
  explicit constexpr HotwordResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HotwordResult(const HotwordResult& from);
  HotwordResult(HotwordResult&& from) noexcept
    : HotwordResult() {
    *this = ::std::move(from);
  }

  inline HotwordResult& operator=(const HotwordResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordResult& operator=(HotwordResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HotwordResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const HotwordResult* internal_default_instance() {
    return reinterpret_cast<const HotwordResult*>(
               &_HotwordResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HotwordResult& a, HotwordResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HotwordResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HotwordResult* New() const final {
    return CreateMaybeMessage<HotwordResult>(nullptr);
  }

  HotwordResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HotwordResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HotwordResult& from);
  void MergeFrom(const HotwordResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotwordResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.HotwordResult";
  }
  protected:
  explicit HotwordResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hotword_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHotwordFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword();
  const std::string& hotword() const;
  void set_hotword(const std::string& value);
  void set_hotword(std::string&& value);
  void set_hotword(const char* value);
  void set_hotword(const char* value, size_t size);
  std::string* mutable_hotword();
  std::string* release_hotword();
  void set_allocated_hotword(std::string* hotword);
  private:
  const std::string& _internal_hotword() const;
  void _internal_set_hotword(const std::string& value);
  std::string* _internal_mutable_hotword();
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:rero.HotwordResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotword_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hotword_2eproto;
};
// -------------------------------------------------------------------

class RawEmbedding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.RawEmbedding) */ {
 public:
  inline RawEmbedding() : RawEmbedding(nullptr) {}
  virtual ~RawEmbedding();
  explicit constexpr RawEmbedding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawEmbedding(const RawEmbedding& from);
  RawEmbedding(RawEmbedding&& from) noexcept
    : RawEmbedding() {
    *this = ::std::move(from);
  }

  inline RawEmbedding& operator=(const RawEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawEmbedding& operator=(RawEmbedding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawEmbedding& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawEmbedding* internal_default_instance() {
    return reinterpret_cast<const RawEmbedding*>(
               &_RawEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawEmbedding& a, RawEmbedding& b) {
    a.Swap(&b);
  }
  inline void Swap(RawEmbedding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawEmbedding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawEmbedding* New() const final {
    return CreateMaybeMessage<RawEmbedding>(nullptr);
  }

  RawEmbedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawEmbedding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawEmbedding& from);
  void MergeFrom(const RawEmbedding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawEmbedding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.RawEmbedding";
  }
  protected:
  explicit RawEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hotword_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddingFieldNumber = 1,
  };
  // repeated float embedding = 1;
  int embedding_size() const;
  private:
  int _internal_embedding_size() const;
  public:
  void clear_embedding();
  private:
  float _internal_embedding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_embedding() const;
  void _internal_add_embedding(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_embedding();
  public:
  float embedding(int index) const;
  void set_embedding(int index, float value);
  void add_embedding(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      embedding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_embedding();

  // @@protoc_insertion_point(class_scope:rero.RawEmbedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > embedding_;
  mutable std::atomic<int> _embedding_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hotword_2eproto;
};
// -------------------------------------------------------------------

class HotwordEmbedding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.HotwordEmbedding) */ {
 public:
  inline HotwordEmbedding() : HotwordEmbedding(nullptr) {}
  virtual ~HotwordEmbedding();
  explicit constexpr HotwordEmbedding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HotwordEmbedding(const HotwordEmbedding& from);
  HotwordEmbedding(HotwordEmbedding&& from) noexcept
    : HotwordEmbedding() {
    *this = ::std::move(from);
  }

  inline HotwordEmbedding& operator=(const HotwordEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordEmbedding& operator=(HotwordEmbedding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HotwordEmbedding& default_instance() {
    return *internal_default_instance();
  }
  static inline const HotwordEmbedding* internal_default_instance() {
    return reinterpret_cast<const HotwordEmbedding*>(
               &_HotwordEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HotwordEmbedding& a, HotwordEmbedding& b) {
    a.Swap(&b);
  }
  inline void Swap(HotwordEmbedding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordEmbedding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HotwordEmbedding* New() const final {
    return CreateMaybeMessage<HotwordEmbedding>(nullptr);
  }

  HotwordEmbedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HotwordEmbedding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HotwordEmbedding& from);
  void MergeFrom(const HotwordEmbedding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotwordEmbedding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.HotwordEmbedding";
  }
  protected:
  explicit HotwordEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hotword_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHotwordFieldNumber = 1,
    kEmbeddingFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword();
  const std::string& hotword() const;
  void set_hotword(const std::string& value);
  void set_hotword(std::string&& value);
  void set_hotword(const char* value);
  void set_hotword(const char* value, size_t size);
  std::string* mutable_hotword();
  std::string* release_hotword();
  void set_allocated_hotword(std::string* hotword);
  private:
  const std::string& _internal_hotword() const;
  void _internal_set_hotword(const std::string& value);
  std::string* _internal_mutable_hotword();
  public:

  // .rero.RawEmbedding embedding = 2;
  bool has_embedding() const;
  private:
  bool _internal_has_embedding() const;
  public:
  void clear_embedding();
  const ::rero::RawEmbedding& embedding() const;
  ::rero::RawEmbedding* release_embedding();
  ::rero::RawEmbedding* mutable_embedding();
  void set_allocated_embedding(::rero::RawEmbedding* embedding);
  private:
  const ::rero::RawEmbedding& _internal_embedding() const;
  ::rero::RawEmbedding* _internal_mutable_embedding();
  public:
  void unsafe_arena_set_allocated_embedding(
      ::rero::RawEmbedding* embedding);
  ::rero::RawEmbedding* unsafe_arena_release_embedding();

  // @@protoc_insertion_point(class_scope:rero.HotwordEmbedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotword_;
  ::rero::RawEmbedding* embedding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hotword_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hotword_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:rero.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hotword_2eproto;
};
// -------------------------------------------------------------------

class HotwordFileName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rero.HotwordFileName) */ {
 public:
  inline HotwordFileName() : HotwordFileName(nullptr) {}
  virtual ~HotwordFileName();
  explicit constexpr HotwordFileName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HotwordFileName(const HotwordFileName& from);
  HotwordFileName(HotwordFileName&& from) noexcept
    : HotwordFileName() {
    *this = ::std::move(from);
  }

  inline HotwordFileName& operator=(const HotwordFileName& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotwordFileName& operator=(HotwordFileName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HotwordFileName& default_instance() {
    return *internal_default_instance();
  }
  static inline const HotwordFileName* internal_default_instance() {
    return reinterpret_cast<const HotwordFileName*>(
               &_HotwordFileName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HotwordFileName& a, HotwordFileName& b) {
    a.Swap(&b);
  }
  inline void Swap(HotwordFileName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotwordFileName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HotwordFileName* New() const final {
    return CreateMaybeMessage<HotwordFileName>(nullptr);
  }

  HotwordFileName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HotwordFileName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HotwordFileName& from);
  void MergeFrom(const HotwordFileName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotwordFileName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rero.HotwordFileName";
  }
  protected:
  explicit HotwordFileName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hotword_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHotwordFieldNumber = 1,
    kFilenameFieldNumber = 2,
  };
  // string hotword = 1;
  void clear_hotword();
  const std::string& hotword() const;
  void set_hotword(const std::string& value);
  void set_hotword(std::string&& value);
  void set_hotword(const char* value);
  void set_hotword(const char* value, size_t size);
  std::string* mutable_hotword();
  std::string* release_hotword();
  void set_allocated_hotword(std::string* hotword);
  private:
  const std::string& _internal_hotword() const;
  void _internal_set_hotword(const std::string& value);
  std::string* _internal_mutable_hotword();
  public:

  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:rero.HotwordFileName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hotword_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HotwordResult

// string hotword = 1;
inline void HotwordResult::clear_hotword() {
  hotword_.ClearToEmpty();
}
inline const std::string& HotwordResult::hotword() const {
  // @@protoc_insertion_point(field_get:rero.HotwordResult.hotword)
  return _internal_hotword();
}
inline void HotwordResult::set_hotword(const std::string& value) {
  _internal_set_hotword(value);
  // @@protoc_insertion_point(field_set:rero.HotwordResult.hotword)
}
inline std::string* HotwordResult::mutable_hotword() {
  // @@protoc_insertion_point(field_mutable:rero.HotwordResult.hotword)
  return _internal_mutable_hotword();
}
inline const std::string& HotwordResult::_internal_hotword() const {
  return hotword_.Get();
}
inline void HotwordResult::_internal_set_hotword(const std::string& value) {
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HotwordResult::set_hotword(std::string&& value) {
  
  hotword_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.HotwordResult.hotword)
}
inline void HotwordResult::set_hotword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.HotwordResult.hotword)
}
inline void HotwordResult::set_hotword(const char* value,
    size_t size) {
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.HotwordResult.hotword)
}
inline std::string* HotwordResult::_internal_mutable_hotword() {
  
  return hotword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HotwordResult::release_hotword() {
  // @@protoc_insertion_point(field_release:rero.HotwordResult.hotword)
  return hotword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HotwordResult::set_allocated_hotword(std::string* hotword) {
  if (hotword != nullptr) {
    
  } else {
    
  }
  hotword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hotword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordResult.hotword)
}

// float confidence = 2;
inline void HotwordResult::clear_confidence() {
  confidence_ = 0;
}
inline float HotwordResult::_internal_confidence() const {
  return confidence_;
}
inline float HotwordResult::confidence() const {
  // @@protoc_insertion_point(field_get:rero.HotwordResult.confidence)
  return _internal_confidence();
}
inline void HotwordResult::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void HotwordResult::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:rero.HotwordResult.confidence)
}

// -------------------------------------------------------------------

// RawEmbedding

// repeated float embedding = 1;
inline int RawEmbedding::_internal_embedding_size() const {
  return embedding_.size();
}
inline int RawEmbedding::embedding_size() const {
  return _internal_embedding_size();
}
inline void RawEmbedding::clear_embedding() {
  embedding_.Clear();
}
inline float RawEmbedding::_internal_embedding(int index) const {
  return embedding_.Get(index);
}
inline float RawEmbedding::embedding(int index) const {
  // @@protoc_insertion_point(field_get:rero.RawEmbedding.embedding)
  return _internal_embedding(index);
}
inline void RawEmbedding::set_embedding(int index, float value) {
  embedding_.Set(index, value);
  // @@protoc_insertion_point(field_set:rero.RawEmbedding.embedding)
}
inline void RawEmbedding::_internal_add_embedding(float value) {
  embedding_.Add(value);
}
inline void RawEmbedding::add_embedding(float value) {
  _internal_add_embedding(value);
  // @@protoc_insertion_point(field_add:rero.RawEmbedding.embedding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RawEmbedding::_internal_embedding() const {
  return embedding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RawEmbedding::embedding() const {
  // @@protoc_insertion_point(field_list:rero.RawEmbedding.embedding)
  return _internal_embedding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RawEmbedding::_internal_mutable_embedding() {
  return &embedding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RawEmbedding::mutable_embedding() {
  // @@protoc_insertion_point(field_mutable_list:rero.RawEmbedding.embedding)
  return _internal_mutable_embedding();
}

// -------------------------------------------------------------------

// HotwordEmbedding

// string hotword = 1;
inline void HotwordEmbedding::clear_hotword() {
  hotword_.ClearToEmpty();
}
inline const std::string& HotwordEmbedding::hotword() const {
  // @@protoc_insertion_point(field_get:rero.HotwordEmbedding.hotword)
  return _internal_hotword();
}
inline void HotwordEmbedding::set_hotword(const std::string& value) {
  _internal_set_hotword(value);
  // @@protoc_insertion_point(field_set:rero.HotwordEmbedding.hotword)
}
inline std::string* HotwordEmbedding::mutable_hotword() {
  // @@protoc_insertion_point(field_mutable:rero.HotwordEmbedding.hotword)
  return _internal_mutable_hotword();
}
inline const std::string& HotwordEmbedding::_internal_hotword() const {
  return hotword_.Get();
}
inline void HotwordEmbedding::_internal_set_hotword(const std::string& value) {
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HotwordEmbedding::set_hotword(std::string&& value) {
  
  hotword_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.HotwordEmbedding.hotword)
}
inline void HotwordEmbedding::set_hotword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.HotwordEmbedding.hotword)
}
inline void HotwordEmbedding::set_hotword(const char* value,
    size_t size) {
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.HotwordEmbedding.hotword)
}
inline std::string* HotwordEmbedding::_internal_mutable_hotword() {
  
  return hotword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HotwordEmbedding::release_hotword() {
  // @@protoc_insertion_point(field_release:rero.HotwordEmbedding.hotword)
  return hotword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HotwordEmbedding::set_allocated_hotword(std::string* hotword) {
  if (hotword != nullptr) {
    
  } else {
    
  }
  hotword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hotword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordEmbedding.hotword)
}

// .rero.RawEmbedding embedding = 2;
inline bool HotwordEmbedding::_internal_has_embedding() const {
  return this != internal_default_instance() && embedding_ != nullptr;
}
inline bool HotwordEmbedding::has_embedding() const {
  return _internal_has_embedding();
}
inline void HotwordEmbedding::clear_embedding() {
  if (GetArena() == nullptr && embedding_ != nullptr) {
    delete embedding_;
  }
  embedding_ = nullptr;
}
inline const ::rero::RawEmbedding& HotwordEmbedding::_internal_embedding() const {
  const ::rero::RawEmbedding* p = embedding_;
  return p != nullptr ? *p : reinterpret_cast<const ::rero::RawEmbedding&>(
      ::rero::_RawEmbedding_default_instance_);
}
inline const ::rero::RawEmbedding& HotwordEmbedding::embedding() const {
  // @@protoc_insertion_point(field_get:rero.HotwordEmbedding.embedding)
  return _internal_embedding();
}
inline void HotwordEmbedding::unsafe_arena_set_allocated_embedding(
    ::rero::RawEmbedding* embedding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embedding_);
  }
  embedding_ = embedding;
  if (embedding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rero.HotwordEmbedding.embedding)
}
inline ::rero::RawEmbedding* HotwordEmbedding::release_embedding() {
  
  ::rero::RawEmbedding* temp = embedding_;
  embedding_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rero::RawEmbedding* HotwordEmbedding::unsafe_arena_release_embedding() {
  // @@protoc_insertion_point(field_release:rero.HotwordEmbedding.embedding)
  
  ::rero::RawEmbedding* temp = embedding_;
  embedding_ = nullptr;
  return temp;
}
inline ::rero::RawEmbedding* HotwordEmbedding::_internal_mutable_embedding() {
  
  if (embedding_ == nullptr) {
    auto* p = CreateMaybeMessage<::rero::RawEmbedding>(GetArena());
    embedding_ = p;
  }
  return embedding_;
}
inline ::rero::RawEmbedding* HotwordEmbedding::mutable_embedding() {
  // @@protoc_insertion_point(field_mutable:rero.HotwordEmbedding.embedding)
  return _internal_mutable_embedding();
}
inline void HotwordEmbedding::set_allocated_embedding(::rero::RawEmbedding* embedding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete embedding_;
  }
  if (embedding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(embedding);
    if (message_arena != submessage_arena) {
      embedding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding, submessage_arena);
    }
    
  } else {
    
  }
  embedding_ = embedding;
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordEmbedding.embedding)
}

// -------------------------------------------------------------------

// Result

// string msg = 1;
inline void Result::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Result::msg() const {
  // @@protoc_insertion_point(field_get:rero.Result.msg)
  return _internal_msg();
}
inline void Result::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rero.Result.msg)
}
inline std::string* Result::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rero.Result.msg)
  return _internal_mutable_msg();
}
inline const std::string& Result::_internal_msg() const {
  return msg_.Get();
}
inline void Result::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Result::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.Result.msg)
}
inline void Result::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.Result.msg)
}
inline void Result::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.Result.msg)
}
inline std::string* Result::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Result::release_msg() {
  // @@protoc_insertion_point(field_release:rero.Result.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.Result.msg)
}

// -------------------------------------------------------------------

// HotwordFileName

// string hotword = 1;
inline void HotwordFileName::clear_hotword() {
  hotword_.ClearToEmpty();
}
inline const std::string& HotwordFileName::hotword() const {
  // @@protoc_insertion_point(field_get:rero.HotwordFileName.hotword)
  return _internal_hotword();
}
inline void HotwordFileName::set_hotword(const std::string& value) {
  _internal_set_hotword(value);
  // @@protoc_insertion_point(field_set:rero.HotwordFileName.hotword)
}
inline std::string* HotwordFileName::mutable_hotword() {
  // @@protoc_insertion_point(field_mutable:rero.HotwordFileName.hotword)
  return _internal_mutable_hotword();
}
inline const std::string& HotwordFileName::_internal_hotword() const {
  return hotword_.Get();
}
inline void HotwordFileName::_internal_set_hotword(const std::string& value) {
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HotwordFileName::set_hotword(std::string&& value) {
  
  hotword_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.HotwordFileName.hotword)
}
inline void HotwordFileName::set_hotword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.HotwordFileName.hotword)
}
inline void HotwordFileName::set_hotword(const char* value,
    size_t size) {
  
  hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.HotwordFileName.hotword)
}
inline std::string* HotwordFileName::_internal_mutable_hotword() {
  
  return hotword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HotwordFileName::release_hotword() {
  // @@protoc_insertion_point(field_release:rero.HotwordFileName.hotword)
  return hotword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HotwordFileName::set_allocated_hotword(std::string* hotword) {
  if (hotword != nullptr) {
    
  } else {
    
  }
  hotword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hotword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordFileName.hotword)
}

// string filename = 2;
inline void HotwordFileName::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& HotwordFileName::filename() const {
  // @@protoc_insertion_point(field_get:rero.HotwordFileName.filename)
  return _internal_filename();
}
inline void HotwordFileName::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:rero.HotwordFileName.filename)
}
inline std::string* HotwordFileName::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:rero.HotwordFileName.filename)
  return _internal_mutable_filename();
}
inline const std::string& HotwordFileName::_internal_filename() const {
  return filename_.Get();
}
inline void HotwordFileName::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HotwordFileName::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rero.HotwordFileName.filename)
}
inline void HotwordFileName::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rero.HotwordFileName.filename)
}
inline void HotwordFileName::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rero.HotwordFileName.filename)
}
inline std::string* HotwordFileName::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HotwordFileName::release_filename() {
  // @@protoc_insertion_point(field_release:rero.HotwordFileName.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HotwordFileName::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rero.HotwordFileName.filename)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rero

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hotword_2eproto

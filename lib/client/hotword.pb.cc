// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotword.proto

#include "hotword.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rero {
constexpr HotwordResult::HotwordResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hotword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , confidence_(0){}
struct HotwordResultDefaultTypeInternal {
  constexpr HotwordResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HotwordResultDefaultTypeInternal() {}
  union {
    HotwordResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HotwordResultDefaultTypeInternal _HotwordResult_default_instance_;
constexpr RawEmbedding::RawEmbedding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : embedding_()
  , _embedding_cached_byte_size_(){}
struct RawEmbeddingDefaultTypeInternal {
  constexpr RawEmbeddingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawEmbeddingDefaultTypeInternal() {}
  union {
    RawEmbedding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawEmbeddingDefaultTypeInternal _RawEmbedding_default_instance_;
constexpr HotwordEmbedding::HotwordEmbedding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hotword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , embedding_(nullptr){}
struct HotwordEmbeddingDefaultTypeInternal {
  constexpr HotwordEmbeddingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HotwordEmbeddingDefaultTypeInternal() {}
  union {
    HotwordEmbedding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HotwordEmbeddingDefaultTypeInternal _HotwordEmbedding_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr HotwordFileName::HotwordFileName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hotword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HotwordFileNameDefaultTypeInternal {
  constexpr HotwordFileNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HotwordFileNameDefaultTypeInternal() {}
  union {
    HotwordFileName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HotwordFileNameDefaultTypeInternal _HotwordFileName_default_instance_;
}  // namespace rero
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hotword_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hotword_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hotword_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hotword_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rero::HotwordResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rero::HotwordResult, hotword_),
  PROTOBUF_FIELD_OFFSET(::rero::HotwordResult, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rero::RawEmbedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rero::RawEmbedding, embedding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rero::HotwordEmbedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rero::HotwordEmbedding, hotword_),
  PROTOBUF_FIELD_OFFSET(::rero::HotwordEmbedding, embedding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rero::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rero::Result, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rero::HotwordFileName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rero::HotwordFileName, hotword_),
  PROTOBUF_FIELD_OFFSET(::rero::HotwordFileName, filename_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rero::HotwordResult)},
  { 7, -1, sizeof(::rero::RawEmbedding)},
  { 13, -1, sizeof(::rero::HotwordEmbedding)},
  { 20, -1, sizeof(::rero::Result)},
  { 26, -1, sizeof(::rero::HotwordFileName)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rero::_HotwordResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rero::_RawEmbedding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rero::_HotwordEmbedding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rero::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rero::_HotwordFileName_default_instance_),
};

const char descriptor_table_protodef_hotword_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rhotword.proto\022\004rero\032\013audio.proto\"4\n\rHo"
  "twordResult\022\017\n\007hotword\030\001 \001(\t\022\022\n\nconfiden"
  "ce\030\002 \001(\002\"!\n\014RawEmbedding\022\021\n\tembedding\030\001 "
  "\003(\002\"J\n\020HotwordEmbedding\022\017\n\007hotword\030\001 \001(\t"
  "\022%\n\tembedding\030\002 \001(\0132\022.rero.RawEmbedding\""
  "\025\n\006Result\022\013\n\003msg\030\001 \001(\t\"4\n\017HotwordFileNam"
  "e\022\017\n\007hotword\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t2\271\002\n"
  "\020HotwordDetection\022<\n\022StartHotwordStream\022"
  "\013.rero.Audio\032\023.rero.HotwordResult\"\000(\0010\001\022"
  "8\n\020RecognizeHotword\022\013.rero.Audio\032\023.rero."
  "HotwordResult\"\000(\001\0223\n\014GetEmbedding\022\013.rero"
  ".Audio\032\022.rero.RawEmbedding\"\000(\001\022\?\n\025AddEmb"
  "eddingToHotword\022\026.rero.HotwordEmbedding\032"
  "\014.rero.Result\"\000\0227\n\016PersistHotword\022\025.rero"
  ".HotwordFileName\032\014.rero.Result\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hotword_2eproto_deps[1] = {
  &::descriptor_table_audio_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hotword_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hotword_2eproto = {
  false, false, 600, descriptor_table_protodef_hotword_2eproto, "hotword.proto", 
  &descriptor_table_hotword_2eproto_once, descriptor_table_hotword_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_hotword_2eproto::offsets,
  file_level_metadata_hotword_2eproto, file_level_enum_descriptors_hotword_2eproto, file_level_service_descriptors_hotword_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_hotword_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hotword_2eproto);
  return descriptor_table_hotword_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hotword_2eproto(&descriptor_table_hotword_2eproto);
namespace rero {

// ===================================================================

class HotwordResult::_Internal {
 public:
};

HotwordResult::HotwordResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.HotwordResult)
}
HotwordResult::HotwordResult(const HotwordResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hotword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hotword().empty()) {
    hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hotword(), 
      GetArena());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:rero.HotwordResult)
}

void HotwordResult::SharedCtor() {
hotword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
confidence_ = 0;
}

HotwordResult::~HotwordResult() {
  // @@protoc_insertion_point(destructor:rero.HotwordResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HotwordResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hotword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HotwordResult::ArenaDtor(void* object) {
  HotwordResult* _this = reinterpret_cast< HotwordResult* >(object);
  (void)_this;
}
void HotwordResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HotwordResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HotwordResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.HotwordResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hotword_.ClearToEmpty();
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotwordResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hotword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hotword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rero.HotwordResult.hotword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HotwordResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.HotwordResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hotword = 1;
  if (this->hotword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hotword().data(), static_cast<int>(this->_internal_hotword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rero.HotwordResult.hotword");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hotword(), target);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.HotwordResult)
  return target;
}

size_t HotwordResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.HotwordResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hotword = 1;
  if (this->hotword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hotword());
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HotwordResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rero.HotwordResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HotwordResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HotwordResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rero.HotwordResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rero.HotwordResult)
    MergeFrom(*source);
  }
}

void HotwordResult::MergeFrom(const HotwordResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rero.HotwordResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hotword().size() > 0) {
    _internal_set_hotword(from._internal_hotword());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void HotwordResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rero.HotwordResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotwordResult::CopyFrom(const HotwordResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.HotwordResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotwordResult::IsInitialized() const {
  return true;
}

void HotwordResult::InternalSwap(HotwordResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hotword_.Swap(&other->hotword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HotwordResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawEmbedding::_Internal {
 public:
};

RawEmbedding::RawEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  embedding_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.RawEmbedding)
}
RawEmbedding::RawEmbedding(const RawEmbedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      embedding_(from.embedding_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rero.RawEmbedding)
}

void RawEmbedding::SharedCtor() {
}

RawEmbedding::~RawEmbedding() {
  // @@protoc_insertion_point(destructor:rero.RawEmbedding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawEmbedding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawEmbedding::ArenaDtor(void* object) {
  RawEmbedding* _this = reinterpret_cast< RawEmbedding* >(object);
  (void)_this;
}
void RawEmbedding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawEmbedding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawEmbedding::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.RawEmbedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embedding_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawEmbedding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float embedding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_embedding(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_embedding(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawEmbedding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.RawEmbedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float embedding = 1;
  if (this->_internal_embedding_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_embedding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.RawEmbedding)
  return target;
}

size_t RawEmbedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.RawEmbedding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float embedding = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_embedding_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _embedding_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawEmbedding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rero.RawEmbedding)
  GOOGLE_DCHECK_NE(&from, this);
  const RawEmbedding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawEmbedding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rero.RawEmbedding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rero.RawEmbedding)
    MergeFrom(*source);
  }
}

void RawEmbedding::MergeFrom(const RawEmbedding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rero.RawEmbedding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embedding_.MergeFrom(from.embedding_);
}

void RawEmbedding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rero.RawEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawEmbedding::CopyFrom(const RawEmbedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.RawEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawEmbedding::IsInitialized() const {
  return true;
}

void RawEmbedding::InternalSwap(RawEmbedding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  embedding_.InternalSwap(&other->embedding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawEmbedding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HotwordEmbedding::_Internal {
 public:
  static const ::rero::RawEmbedding& embedding(const HotwordEmbedding* msg);
};

const ::rero::RawEmbedding&
HotwordEmbedding::_Internal::embedding(const HotwordEmbedding* msg) {
  return *msg->embedding_;
}
HotwordEmbedding::HotwordEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.HotwordEmbedding)
}
HotwordEmbedding::HotwordEmbedding(const HotwordEmbedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hotword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hotword().empty()) {
    hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hotword(), 
      GetArena());
  }
  if (from._internal_has_embedding()) {
    embedding_ = new ::rero::RawEmbedding(*from.embedding_);
  } else {
    embedding_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rero.HotwordEmbedding)
}

void HotwordEmbedding::SharedCtor() {
hotword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
embedding_ = nullptr;
}

HotwordEmbedding::~HotwordEmbedding() {
  // @@protoc_insertion_point(destructor:rero.HotwordEmbedding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HotwordEmbedding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hotword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete embedding_;
}

void HotwordEmbedding::ArenaDtor(void* object) {
  HotwordEmbedding* _this = reinterpret_cast< HotwordEmbedding* >(object);
  (void)_this;
}
void HotwordEmbedding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HotwordEmbedding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HotwordEmbedding::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.HotwordEmbedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hotword_.ClearToEmpty();
  if (GetArena() == nullptr && embedding_ != nullptr) {
    delete embedding_;
  }
  embedding_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotwordEmbedding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hotword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hotword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rero.HotwordEmbedding.hotword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rero.RawEmbedding embedding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_embedding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HotwordEmbedding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.HotwordEmbedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hotword = 1;
  if (this->hotword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hotword().data(), static_cast<int>(this->_internal_hotword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rero.HotwordEmbedding.hotword");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hotword(), target);
  }

  // .rero.RawEmbedding embedding = 2;
  if (this->has_embedding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::embedding(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.HotwordEmbedding)
  return target;
}

size_t HotwordEmbedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.HotwordEmbedding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hotword = 1;
  if (this->hotword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hotword());
  }

  // .rero.RawEmbedding embedding = 2;
  if (this->has_embedding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *embedding_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HotwordEmbedding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rero.HotwordEmbedding)
  GOOGLE_DCHECK_NE(&from, this);
  const HotwordEmbedding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HotwordEmbedding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rero.HotwordEmbedding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rero.HotwordEmbedding)
    MergeFrom(*source);
  }
}

void HotwordEmbedding::MergeFrom(const HotwordEmbedding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rero.HotwordEmbedding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hotword().size() > 0) {
    _internal_set_hotword(from._internal_hotword());
  }
  if (from.has_embedding()) {
    _internal_mutable_embedding()->::rero::RawEmbedding::MergeFrom(from._internal_embedding());
  }
}

void HotwordEmbedding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rero.HotwordEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotwordEmbedding::CopyFrom(const HotwordEmbedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.HotwordEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotwordEmbedding::IsInitialized() const {
  return true;
}

void HotwordEmbedding::InternalSwap(HotwordEmbedding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hotword_.Swap(&other->hotword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(embedding_, other->embedding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HotwordEmbedding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rero.Result)
}

void Result::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:rero.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rero.Result.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rero.Result.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rero.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rero.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rero.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rero.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rero.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HotwordFileName::_Internal {
 public:
};

HotwordFileName::HotwordFileName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rero.HotwordFileName)
}
HotwordFileName::HotwordFileName(const HotwordFileName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hotword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hotword().empty()) {
    hotword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hotword(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rero.HotwordFileName)
}

void HotwordFileName::SharedCtor() {
hotword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HotwordFileName::~HotwordFileName() {
  // @@protoc_insertion_point(destructor:rero.HotwordFileName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HotwordFileName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hotword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HotwordFileName::ArenaDtor(void* object) {
  HotwordFileName* _this = reinterpret_cast< HotwordFileName* >(object);
  (void)_this;
}
void HotwordFileName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HotwordFileName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HotwordFileName::Clear() {
// @@protoc_insertion_point(message_clear_start:rero.HotwordFileName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hotword_.ClearToEmpty();
  filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotwordFileName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hotword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hotword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rero.HotwordFileName.hotword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rero.HotwordFileName.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HotwordFileName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rero.HotwordFileName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hotword = 1;
  if (this->hotword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hotword().data(), static_cast<int>(this->_internal_hotword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rero.HotwordFileName.hotword");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hotword(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rero.HotwordFileName.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rero.HotwordFileName)
  return target;
}

size_t HotwordFileName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rero.HotwordFileName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hotword = 1;
  if (this->hotword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hotword());
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HotwordFileName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rero.HotwordFileName)
  GOOGLE_DCHECK_NE(&from, this);
  const HotwordFileName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HotwordFileName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rero.HotwordFileName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rero.HotwordFileName)
    MergeFrom(*source);
  }
}

void HotwordFileName::MergeFrom(const HotwordFileName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rero.HotwordFileName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hotword().size() > 0) {
    _internal_set_hotword(from._internal_hotword());
  }
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void HotwordFileName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rero.HotwordFileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotwordFileName::CopyFrom(const HotwordFileName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rero.HotwordFileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotwordFileName::IsInitialized() const {
  return true;
}

void HotwordFileName::InternalSwap(HotwordFileName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hotword_.Swap(&other->hotword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HotwordFileName::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rero
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rero::HotwordResult* Arena::CreateMaybeMessage< ::rero::HotwordResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::HotwordResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::RawEmbedding* Arena::CreateMaybeMessage< ::rero::RawEmbedding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::RawEmbedding >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::HotwordEmbedding* Arena::CreateMaybeMessage< ::rero::HotwordEmbedding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::HotwordEmbedding >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::Result* Arena::CreateMaybeMessage< ::rero::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::rero::HotwordFileName* Arena::CreateMaybeMessage< ::rero::HotwordFileName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rero::HotwordFileName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
